#!/usr/bin/env node

/**
 * Module dependencies.
 */

var http = require('http');
var dbConfig = require('../environment/pgDatabase');
var redis = require('../environment/redis');
require('../routes/util/helpers');
/**
 * Get port from environment and store in Express.
 */
var port = normalizePort('8081');
var server;
/**
 * Create HTTP server.
 */
/**
 * Create DB connection.
 */
dbConfig.createpgConn(function (error) {
	if (error) {
		console.log('Unable to connect to the pgDB server. Error:', error);
	} else {
		redis.createRedisConn((err) => {
			if (err) {
				  console.log('Unable to initialize redis. Error:', err);
			} else {
				var app = require('../app');
				app.set('port', port);
				server = http.createServer(app);
				
				server.listen(port);
				server.on('error', onError);
				server.on('listening', onListening);
			}
		});
	}
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	var port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ?
		'Pipe ' + port :
		'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	var addr = server.address();
	var bind = typeof addr === 'string' ?
		'pipe ' + addr :
		'port ' + addr.port;
	console.log('Listening on ' + bind);
}

process.on('SIGTERM', function () {
    shutdown('SIGTERM');
});

process.on('SIGINT', function () {
    shutdown('SIGINT');
});

var shutdown = event => {
	console.log('Event triggered : ' + event);
	server.close((err) => {
		console.log("Finished all requests");
		process.exit(err ? 1 : 0);
	});
}
